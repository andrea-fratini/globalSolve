lapply(varia, function(v){sum(v %in% c(variables$state_endogenous))})
n_exo <- lapply(varia, function(v){sum(v %in% c(variables$state_endogenous,variables$endogenous))})
n_state_endo <- lapply(varia, function(v){sum(v %in% c(variables$state_endogenous))})
n_exo
n_exo-n_state_endo
n_exo
n_state_endo
names(n_exo)[which(n_exo)]==0
names(n_exo)[which(n_exo==0)]
count_vars <- function(eq, var_list) {
vars_in_eq <- all.vars(eq)  # Extract variables from the equation
sum(vars_in_eq %in% var_list$endogenous) +
sum(vars_in_eq %in% var_list$state_endogenous)
}
# Compute counts for each equation
counts <- sapply(FOCs, count_vars, var_list = variables)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
FOCs_ordered
normalize_vars <- function(var_names) {
gsub("_[fb][0-9]+", "", var_names)  # Remove time subscripts like "_f1" or "_b1"
}
# Function to count the number of endogenous and state_endogenous variables
count_vars <- function(eq, var_list) {
vars_in_eq <- all.vars(eq)  # Extract all variables
normalized_vars <- normalize_vars(vars_in_eq)  # Normalize variable names
# Count how many belong to endogenous and state_endogenous
sum(normalized_vars %in% var_list$endogenous) +
sum(normalized_vars %in% var_list$state_endogenous)
}
# Compute counts for each equation
counts <- sapply(FOCs, count_vars, var_list = variables)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
FOCs_ordered
# Function to count the number of endogenous and state_endogenous variables
count_vars <- function(eq, var_list) {
vars_in_eq <- all.vars(eq)  # Extract all variables
normalized_vars <- normalize_vars(vars_in_eq)  # Normalize variable names
print(normalized_vars)
# Count how many belong to endogenous and state_endogenous
sum(normalized_vars %in% var_list$endogenous) +
sum(normalized_vars %in% var_list$state_endogenous)
}
# Compute counts for each equation
counts <- sapply(FOCs, count_vars, var_list = variables)
# Function to count the number of endogenous and state_endogenous variables
count_vars <- function(eq, var_list) {
vars_in_eq <- all.vars(eq)  # Extract all variables
normalized_vars <- normalize_vars(vars_in_eq)  # Normalize variable names
print(normalized_vars)
# Count how many belong to endogenous and state_endogenous
print(sum(normalized_vars %in% var_list$endogenous))
sum(normalized_vars %in% var_list$endogenous) +
sum(normalized_vars %in% var_list$state_endogenous)
}
# Compute counts for each equation
counts <- sapply(FOCs, count_vars, var_list = variables)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
FOCs_ordered
order(counts)
counts
counts
# Function to count the number of endogenous and state_endogenous variables
count_vars <- function(eq, var_list) {
vars_in_eq <- all.vars(eq)  # Extract all variables
normalized_vars <- normalize_vars(vars_in_eq)  # Normalize variable names
print(normalized_vars)
# Count how many belong to endogenous and state_endogenous
print(sum(normalized_vars %in% var_list$endogenous))
sum(normalized_vars %in% var_list$endogenous)
}
# Compute counts for each equation
counts <- sapply(FOCs, count_vars, var_list = variables)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
FOCs_ordered
dynamic_to_static <- function(variables) {
gsub("_[fb][0-9]+", "", variables)  # Remove time subscripts like "_f1" or "_b1"
}
count_vars <- function(foc, list_of_vars) {
variables <- all.vars(foc)  # Extract all variables
static_variables <- dynamic_to_static(variables)  # Normalize variable names
print(static_variables)
# Count how many belong to endogenous and state_endogenous
sum(static_variables %in% var_list$endogenous)
}
hierarchical_structure <- function(FOCs, list_of_vars){
counts <- sapply(FOCs, count_vars, list_of_vars = list_of_vars)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
return(FOCs_ordered)
}
hierarchical_structure(FOCs, variables)
dynamic_to_static <- function(variables) {
gsub("_[fb][0-9]+", "", variables)  # Remove time subscripts like "_f1" or "_b1"
}
count_vars <- function(foc, list_of_vars) {
variables <- all.vars(foc)  # Extract all variables
static_variables <- dynamic_to_static(variables)  # Normalize variable names
print(static_variables)
# Count how many belong to endogenous and state_endogenous
sum(static_variables %in% list_of_vars$endogenous)
}
hierarchical_structure <- function(FOCs, list_of_vars){
counts <- sapply(FOCs, count_vars, list_of_vars = list_of_vars)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
return(FOCs_ordered)
}
hierarchical_structure(FOCs, variables)
dynamic_to_static <- function(variables) {
gsub("_[fb][0-9]+", "", variables)  # Remove time subscripts like "_f1" or "_b1"
}
count_vars <- function(foc, list_of_vars) {
variables <- all.vars(foc)  # Extract all variables
static_variables <- dynamic_to_static(variables)  # Normalize variable name
# Count how many belong to endogenous and state_endogenous
sum(static_variables %in% list_of_vars$endogenous)
}
hierarchical_structure <- function(FOCs, list_of_vars){
counts <- sapply(FOCs, count_vars, list_of_vars = list_of_vars)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
return(FOCs_ordered)
}
hierarchical_structure(FOCs, variables)
Ordered_focs <- hierarchical_structure(FOCs, variables)
check_and_timing(Ordered_focs, variables, parameters)
check_and_timing <- function(FOCs, list_of_vars, params) {
#' @param FOCs set of First Order Conditions to be checked
#' @param list_of_vars set of variables defined by the user
#' @param params set of parameters defined by the user
#' @description
#' The function takes as argument the set of First Order Conditions
#' and checks the correctness of the specification,
#' in particular:
#' Checks if the temporal dimension is correctly specified,
#' Checks if the variables has been defined by the user
#' Checks the timing of the variable for each one of the variables and returns it
#' WHY: The goal is to use this functions to get the temporal dimension of the variables in the FOC's
#' NOTICE: this function and hierarchical_structure share some operations that could be optimized in just one
all_variables <- unlist(list_of_vars)
variables <- unique(unlist(lapply(FOCs, function(foc) setdiff(all.vars(foc), names(parameters)))))
# Function to validate the format of each variable
validate_var_format <- function(var) {
# The regular expression that matches the form: "x", "x_ft", "x_bt"
return(grepl("^([a-z]+)(?:_([fb][0-9]+))?$", var))
}
parsed <- lapply(variables, function(var) {
# Check if the variable matches the expected format
if (!validate_var_format(var)) {
stop(paste0("The variable \"", var, "\" does not match the expected format", call. = FALSE))
}
# Extract the base variable and time component
match <- regmatches(var, regexec("([a-z]+)(?:_([fb][0-9]+))?", var))[[1]]
if (!match[2] %in% all_variables) {
stop(paste0("The variable \"", var, "\" is not in the list of variables", call. = FALSE))
}
base_var <- match[2]
# Handle the time component
if (match[3] != "") {
time <- as.numeric(sub("f", "", sub("b", "-", match[3]))) # Convert "t2" to 2, "m2" to -2
} else {
time <- 0 # Assign 0 for base case
}
return(list(name = base_var, time = time))
})
# Group by base variable name
grouped <- split(parsed, sapply(parsed, function(x) x$name))
# Convert to desired format
result <- lapply(grouped, function(lst) {
times <- sapply(lst, function(x) x$time)
return(times)
})
return(result)
}
check_and_timing(Ordered_focs, variables, parameters)
rm(list=ls())
dynamic_to_static <- function(variables) {
gsub("_[fb][0-9]+", "", variables)  # Remove time subscripts like "_f1" or "_b1"
}
count_vars <- function(foc, list_of_vars) {
variables <- all.vars(foc)  # Extract all variables
static_variables <- dynamic_to_static(variables)  # Normalize variable name
# Count how many belong to endogenous and state_endogenous
sum(static_variables %in% list_of_vars$endogenous)
}
hierarchical_structure <- function(FOCs, list_of_vars){
counts <- sapply(FOCs, count_vars, list_of_vars = list_of_vars)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
return(FOCs_ordered)
}
check_and_timing <- function(FOCs, list_of_vars, params) {
#' @param FOCs set of First Order Conditions to be checked
#' @param list_of_vars set of variables defined by the user
#' @param params set of parameters defined by the user
#' @description
#' The function takes as argument the set of First Order Conditions
#' and checks the correctness of the specification,
#' in particular:
#' Checks if the temporal dimension is correctly specified,
#' Checks if the variables has been defined by the user
#' Checks the timing of the variable for each one of the variables and returns it
#' WHY: The goal is to use this functions to get the temporal dimension of the variables in the FOC's
#' NOTICE: this function and hierarchical_structure share some operations that could be optimized in just one
all_variables <- unlist(list_of_vars)
variables <- unique(unlist(lapply(FOCs, function(foc) setdiff(all.vars(foc), names(parameters)))))
# Function to validate the format of each variable
validate_var_format <- function(var) {
# The regular expression that matches the form: "x", "x_ft", "x_bt"
return(grepl("^([a-z]+)(?:_([fb][0-9]+))?$", var))
}
parsed <- lapply(variables, function(var) {
# Check if the variable matches the expected format
if (!validate_var_format(var)) {
stop(paste0("The variable \"", var, "\" does not match the expected format", call. = FALSE))
}
# Extract the base variable and time component
match <- regmatches(var, regexec("([a-z]+)(?:_([fb][0-9]+))?", var))[[1]]
if (!match[2] %in% all_variables) {
stop(paste0("The variable \"", var, "\" is not in the list of variables", call. = FALSE))
}
base_var <- match[2]
# Handle the time component
if (match[3] != "") {
time <- as.numeric(sub("f", "", sub("b", "-", match[3]))) # Convert "t2" to 2, "m2" to -2
} else {
time <- 0 # Assign 0 for base case
}
return(list(name = base_var, time = time))
})
# Group by base variable name
grouped <- split(parsed, sapply(parsed, function(x) x$name))
# Convert to desired format
result <- lapply(grouped, function(lst) {
times <- sapply(lst, function(x) x$time)
return(times)
})
return(result)
}
variables <- list(endogenous=c("cc"), state_endogenous=c("b"),
state_exogenous=c("z"), shocks=c("epsz"))
parameters <- list(bbeta=0.99, ggamma=2, r=1.025, rho_z=0.6, sigma_z=0.02)
grids <- list(b=c(-0.7, 0))
FOCs <- list(f_Euler_cons = cc^(-ggamma) ~ bbeta*r*cc_f1^(-ggamma),
f_Endo_b = b_f1 ~ exp(z) + b - cc,
exo_z = z ~ rho_z*z_b1 + epsz)
Ordered_focs <- hierarchical_structure(FOCs, variables)
Ordered_focs
Timing <- check_and_timing(Ordered_focs, variables, parameters)
Timing
Ordered_focs[[1]]
Ordered_focs
rm(list=ls())
dynamic_to_static <- function(variables) {
gsub("_[fb][0-9]+", "", variables)  # Remove time subscripts like "_f1" or "_b1"
}
count_vars <- function(foc, list_of_vars) {
variables <- all.vars(foc)  # Extract all variables
static_variables <- dynamic_to_static(variables)  # Normalize variable name
# Count how many belong to endogenous and state_endogenous
sum(static_variables %in% list_of_vars$endogenous)
}
hierarchical_structure <- function(FOCs, list_of_vars){
counts <- sapply(FOCs, count_vars, list_of_vars = list_of_vars)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
return(list(FOCs=FOCs_ordered, n_endo=counts[order[counts]]))
}
check_and_timing <- function(FOCs, list_of_vars, params) {
#' @param FOCs set of First Order Conditions to be checked
#' @param list_of_vars set of variables defined by the user
#' @param params set of parameters defined by the user
#' @description
#' The function takes as argument the set of First Order Conditions
#' and checks the correctness of the specification,
#' in particular:
#' Checks if the temporal dimension is correctly specified,
#' Checks if the variables has been defined by the user
#' Checks the timing of the variable for each one of the variables and returns it
#' WHY: The goal is to use this functions to get the temporal dimension of the variables in the FOC's
#' NOTICE: this function and hierarchical_structure share some operations that could be optimized in just one
all_variables <- unlist(list_of_vars)
variables <- unique(unlist(lapply(FOCs, function(foc) setdiff(all.vars(foc), names(parameters)))))
# Function to validate the format of each variable
validate_var_format <- function(var) {
# The regular expression that matches the form: "x", "x_ft", "x_bt"
return(grepl("^([a-z]+)(?:_([fb][0-9]+))?$", var))
}
parsed <- lapply(variables, function(var) {
# Check if the variable matches the expected format
if (!validate_var_format(var)) {
stop(paste0("The variable \"", var, "\" does not match the expected format", call. = FALSE))
}
# Extract the base variable and time component
match <- regmatches(var, regexec("([a-z]+)(?:_([fb][0-9]+))?", var))[[1]]
if (!match[2] %in% all_variables) {
stop(paste0("The variable \"", var, "\" is not in the list of variables", call. = FALSE))
}
base_var <- match[2]
# Handle the time component
if (match[3] != "") {
time <- as.numeric(sub("f", "", sub("b", "-", match[3]))) # Convert "t2" to 2, "m2" to -2
} else {
time <- 0 # Assign 0 for base case
}
return(list(name = base_var, time = time))
})
# Group by base variable name
grouped <- split(parsed, sapply(parsed, function(x) x$name))
# Convert to desired format
result <- lapply(grouped, function(lst) {
times <- sapply(lst, function(x) x$time)
return(times)
})
return(result)
}
variables <- list(endogenous=c("cc"), state_endogenous=c("b"),
state_exogenous=c("z"), shocks=c("epsz"))
parameters <- list(bbeta=0.99, ggamma=2, r=1.025, rho_z=0.6, sigma_z=0.02)
grids <- list(b=c(-0.7, 0))
FOCs <- list(f_Euler_cons = cc^(-ggamma) ~ bbeta*r*cc_f1^(-ggamma),
f_Endo_b = b_f1 ~ exp(z) + b - cc,
exo_z = z ~ rho_z*z_b1 + epsz)
Ordered_focs <- hierarchical_structure(FOCs, variables)
################# Error handling ##################
rm(list=ls())
# Set of functions to obtain the hierarchical structure
dynamic_to_static <- function(variables) {
gsub("_[fb][0-9]+", "", variables)  # Remove time subscripts like "_f1" or "_b1"
}
# Function to count the number of endogenous and state_endogenous variables
count_vars <- function(foc, list_of_vars) {
variables <- all.vars(foc)  # Extract all variables
static_variables <- dynamic_to_static(variables)  # Normalize variable name
# Count how many belong to endogenous and state_endogenous
sum(static_variables %in% list_of_vars$endogenous)
}
hierarchical_structure <- function(FOCs, list_of_vars){
counts <- sapply(FOCs, count_vars, list_of_vars = list_of_vars)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
return(list(FOCs=FOCs_ordered, n_endo=counts[order(counts)]))
}
check_and_timing <- function(FOCs, list_of_vars, params) {
#' @param FOCs set of First Order Conditions to be checked
#' @param list_of_vars set of variables defined by the user
#' @param params set of parameters defined by the user
#' @description
#' The function takes as argument the set of First Order Conditions
#' and checks the correctness of the specification,
#' in particular:
#' Checks if the temporal dimension is correctly specified,
#' Checks if the variables has been defined by the user
#' Checks the timing of the variable for each one of the variables and returns it
#' WHY: The goal is to use this functions to get the temporal dimension of the variables in the FOC's
#' NOTICE: this function and hierarchical_structure share some operations that could be optimized in just one
all_variables <- unlist(list_of_vars)
variables <- unique(unlist(lapply(FOCs, function(foc) setdiff(all.vars(foc), names(parameters)))))
# Function to validate the format of each variable
validate_var_format <- function(var) {
# The regular expression that matches the form: "x", "x_ft", "x_bt"
return(grepl("^([a-z]+)(?:_([fb][0-9]+))?$", var))
}
parsed <- lapply(variables, function(var) {
# Check if the variable matches the expected format
if (!validate_var_format(var)) {
stop(paste0("The variable \"", var, "\" does not match the expected format", call. = FALSE))
}
# Extract the base variable and time component
match <- regmatches(var, regexec("([a-z]+)(?:_([fb][0-9]+))?", var))[[1]]
if (!match[2] %in% all_variables) {
stop(paste0("The variable \"", var, "\" is not in the list of variables", call. = FALSE))
}
base_var <- match[2]
# Handle the time component
if (match[3] != "") {
time <- as.numeric(sub("f", "", sub("b", "-", match[3]))) # Convert "t2" to 2, "m2" to -2
} else {
time <- 0 # Assign 0 for base case
}
return(list(name = base_var, time = time))
})
# Group by base variable name
grouped <- split(parsed, sapply(parsed, function(x) x$name))
# Convert to desired format
result <- lapply(grouped, function(lst) {
times <- sapply(lst, function(x) x$time)
return(times)
})
return(result)
}
variables <- list(endogenous=c("cc"), state_endogenous=c("b"),
state_exogenous=c("z"), shocks=c("epsz"))
parameters <- list(bbeta=0.99, ggamma=2, r=1.025, rho_z=0.6, sigma_z=0.02)
grids <- list(b=c(-0.7, 0))
FOCs <- list(f_Euler_cons = cc^(-ggamma) ~ bbeta*r*cc_f1^(-ggamma),
f_Endo_b = b_f1 ~ exp(z) + b - cc,
exo_z = z ~ rho_z*z_b1 + epsz)
Ordered_focs <- hierarchical_structure(FOCs, variables)
Ordered_focs
Ordered_focs[[1]]
rm(list=ls())
dynamic_to_static <- function(variables) {
gsub("_[fb][0-9]+", "", variables)  # Remove time subscripts like "_f1" or "_b1"
}
count_vars <- function(foc, list_of_vars) {
variables <- all.vars(foc)  # Extract all variables
print(variables) ####
static_variables <- dynamic_to_static(variables)  # Normalize variable name
print(static_variables) ####
# Count how many belong to endogenous and state_endogenous
sum(static_variables %in% list_of_vars$endogenous)
}
hierarchical_structure <- function(FOCs, list_of_vars){
counts <- sapply(FOCs, count_vars, list_of_vars = list_of_vars)
# Order the equations based on counts
FOCs_ordered <- FOCs[order(counts)]
# Print ordered equations
return(list(FOCs=FOCs_ordered, n_endo=counts[order(counts)]))
}
check_and_timing <- function(FOCs, list_of_vars, params) {
#' @param FOCs set of First Order Conditions to be checked
#' @param list_of_vars set of variables defined by the user
#' @param params set of parameters defined by the user
#' @description
#' The function takes as argument the set of First Order Conditions
#' and checks the correctness of the specification,
#' in particular:
#' Checks if the temporal dimension is correctly specified,
#' Checks if the variables has been defined by the user
#' Checks the timing of the variable for each one of the variables and returns it
#' WHY: The goal is to use this functions to get the temporal dimension of the variables in the FOC's
#' NOTICE: this function and hierarchical_structure share some operations that could be optimized in just one
all_variables <- unlist(list_of_vars)
variables <- unique(unlist(lapply(FOCs, function(foc) setdiff(all.vars(foc), names(parameters)))))
# Function to validate the format of each variable
validate_var_format <- function(var) {
# The regular expression that matches the form: "x", "x_ft", "x_bt"
return(grepl("^([a-z]+)(?:_([fb][0-9]+))?$", var))
}
parsed <- lapply(variables, function(var) {
# Check if the variable matches the expected format
if (!validate_var_format(var)) {
stop(paste0("The variable \"", var, "\" does not match the expected format", call. = FALSE))
}
# Extract the base variable and time component
match <- regmatches(var, regexec("([a-z]+)(?:_([fb][0-9]+))?", var))[[1]]
if (!match[2] %in% all_variables) {
stop(paste0("The variable \"", var, "\" is not in the list of variables", call. = FALSE))
}
base_var <- match[2]
# Handle the time component
if (match[3] != "") {
time <- as.numeric(sub("f", "", sub("b", "-", match[3]))) # Convert "t2" to 2, "m2" to -2
} else {
time <- 0 # Assign 0 for base case
}
return(list(name = base_var, time = time))
})
# Group by base variable name
grouped <- split(parsed, sapply(parsed, function(x) x$name))
# Convert to desired format
result <- lapply(grouped, function(lst) {
times <- sapply(lst, function(x) x$time)
return(times)
})
return(result)
}
variables <- list(endogenous=c("cc"), state_endogenous=c("b"),
state_exogenous=c("z"), shocks=c("epsz"))
parameters <- list(bbeta=0.99, ggamma=2, r=1.025, rho_z=0.6, sigma_z=0.02)
grids <- list(b=c(-0.7, 0))
FOCs <- list(f_Euler_cons = cc^(-ggamma) ~ bbeta*r*cc_f1^(-ggamma),
f_Endo_b = b_f1 ~ exp(z) + b - cc,
exo_z = z ~ rho_z*z_b1 + epsz)
Ordered_focs <- hierarchical_structure(FOCs, variables)
Ordered_focs
Timing <- check_and_timing(Ordered_focs$FOCs, variables, parameters)
Timing
technical_params <- list(n_grid=10)
library(Rtauchen)
list(cazzo=c(cazzo1=1, cazzo2=4))
pp <- list(cazzo=c(cazzo1=1, cazzo2=4))
pp$cazzo
pp <- list(fica=0.3,cazzo=c(cazzo1=1, cazzo2=4))
pp
unlist(pp)
pp <- list(fica=0.3,cazzo=c(_z=1, _a=4))
pp <- list(fica=0.3,cazzo_=c(z=1, a=4))
unlist(pp)
unlist(use.names = T)
unlist(pp,use.names = T)
pp <- list(sigma=0.3,rho=c(_z=1, _a=4))
pp <- list(sigma=0.3,rho_=c(z=1, a=4))
pp
pp <- list(sigma=0.3,rho_=c(z=1, a=4))
unlist(pp)
names(pp)
